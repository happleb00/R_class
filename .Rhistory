<<<<<<< HEAD
help("Compare")
mexloc[which(unqloc$Locality == mexloc$Locality[i])]
for (i in length(mexloc)){
x[i] <- mexloc[which(unqloc$Locality == mexloc$Locality[i])]
}
head(x[i])
for (i in length(mexloc)){
x <- mexloc[which(unqloc$Locality == mexloc$Locality[i])]
}
head(x)
for (i in length(mexloc)){
blah <- mexloc[which(unqloc$Locality == mexloc$Locality[i])]
}
head(blah)
mexlocfull <- read.table("PBI_Mexico_data.txt", header = TRUE, sep = "\t" ,fill = TRUE, stringsAsFactors = FALSE)
mexloc <- mexlocfull[,c(4:9)]
head(mexloc)
mexlocsub <- subset(mexloc, select = Locality)
#summary(mexlocsub)
#head(mexlocsub)
unqloc <- unique(mexloc, nmax=1)
unqlocsub <- subset(unqloc, select = Locality)
#summary(unqloc)
#print(unqloc)
#head(unqloc)
#head(unqlocsub)
#all.equal(mexlocsub, unqloc)
for (i in length(mexloc)){
blah <- mexloc[which(unqloc$Locality == mexloc$Locality[i])]
}
head(blah)
help("match")
match(unqloc, mexloc)
match(unqlocsub, mexlocsub)
for (i in length(unqloc)){
blah <- match(unqlocsub[i], mexlocsub)
}
head(blah)
for (i in 1:10){
blah <- match(unqlocsub, mexlocsub)
}
head(blah)
for (i in 1:10){
blah <- match(unqlocsub[i], mexlocsub[i])
}
head(blah)
help("duplicated")
head(mexlocsub)
head(mexloc)
if (subset(mexloc, select = Locality) == subset(unqloc, select = Locality))
else print(y)
for (i in 1:10){
for (j in 1:10){
if (unqlocsub[i] == mexlocsub[j])
else print(yes)
}
}
head(blah)
if (unqlocsub[i] == mexlocsub[j]) else print(yes)
dubmex <- duplicated(mexloc)
head(dubmex)
head(mexloc)
fulllist <- rbind(unqloc,mexloc)
head(fulllist)
fulllist <- rbind(unqloc,mexloc)
head(fulllist)
dubmex <- duplicated(fulllist)
head(fulllist)
fulllist <- rbind(unqloc,mexloc)
head(fulllist)
dubmex <- duplicated(fulllist)
head(dubmex)
head(fulllist)
##create a function that will calculate the mean of one of two pollutants from 332 .csv files
all.equal(mexlocsub, unqloc)
help(unique)
if (dupes=TRUE, print(subset(mexloc, select = Locality)))
dupes <- duplicated(mexloc)
#head(dubmex)
if (dupes=TRUE, print(subset(mexloc, select = Locality)))
dupes <- duplicated(mexloc)
return <- if (dupes=TRUE, print(subset(mexloc, select = Locality)))
return
for (i in 1:10){
dupes <- duplicated(mexloc[1])
return <- if (dupes=TRUE, print(subset(mexloc, select = Locality)))
}
return
for (i in 1:10){
dupes <- duplicated(mexloc[i])
return <- if (dupes=TRUE, print(subset(mexloc, select = Locality)))
}
return
dupes <- duplicated(mexloc[1:10])
return <- if (dupes=TRUE, print(subset(mexloc, select = Locality)))
head(dupes)
for (i in 1:10){
dupes <- duplicated(mexloc[1:10])
#head(dupes)
return <- if ([1] = TRUE, print(subset(mexloc, select = Locality)))
}
return
for (i in 1:10){
dupes <- duplicated(mexloc[1:10])
#head(dupes)
return <- if (dupes$1 = TRUE, print(subset(mexloc, select = Locality)))
}
return
return <- if (dupes$1 = TRUE, print(subset(mexloc, select = Locality)))
for (i in 1:10){
dupes <- duplicated(mexloc[1:10])
#head(dupes)
return <- if (dupes$1 = TRUE, print(subset(mexloc[i], select = Locality)))
}
return
for (i in 1:10){
return1 <- print(subset(mexloc[i], select = Locality)))
}
return1
for (i in 1:10){
return1 <- print(subset(mexloc[i], select = Locality)))
}
for (i in 1:10){
return1 <- print(subset(mexloc[i], select = Locality))
}
return1
for (i in 1:10){
return1 <- print(mexloc[i])
}
read.table(unqloc[i], header = TRUE, sep = "\t" ,fill = TRUE, stringsAsFactors = FALSE)
for (i in 1:10){
unqlo1 <- read.table(unqloc[i], header = TRUE, sep = "\t" ,fill = TRUE, stringsAsFactors = FALSE)
}
head(unqloc1)
for (i in 1:10){
allfiles <- read.table("PBI_Mexico_data.txt[i]", header = TRUE, sep = "\t" ,fill = TRUE, stringsAsFactors = FALSE)
}
head(allfiles)
for (i in 1:10){
allfiles <- mexlocfull[i]
}
head(allfiles)
for (i in 1:10){
allfiles <- mexloc[i]
}
head(allfiles)
for (i in 1:10){
allfiles <- mexloc[i]
dupes <- duplicated(allfiles, na.rm=TRUE)
}
head(dupes)
for (i in 1:10){
allfiles <- mexloc[i]
dupes <- duplicated(allfiles, na.rm=TRUE)
}
head(dupes)
for (i in 1:10){
allfiles <- mexloc[i]
dupes <- duplicated(allfiles, na.rm=TRUE),
}
head(dupes)
for (i in 1:10){
allfiles <- mexloc[,i]
dupes <- duplicated(allfiles, na.rm=TRUE),
}
head(dupes)
for (i in 1:10){
allfiles <- mexloc[,i]
dupes <- duplicated(allfiles, na.rm=TRUE)
}
head(dupes)
for (i in 1:10){
allfiles <- mexloc[i,]
dupes <- duplicated(allfiles, na.rm=TRUE)
}
head(dupes)
for (i in 1:300){
allfiles <- mexloc[i,]
dupes <- duplicated(allfiles, na.rm=TRUE)
}
head(dupes)
for (i in 1:300){
allfiles <- mexloc[,i]
dupes <- duplicated(allfiles, na.rm=TRUE)
}
head(dupes)
for (i in 1:300){
allfiles <- mexloc[i,]
dupes <- duplicated(allfiles, na.rm=TRUE)
}
head(dupes)
for (i in 1:300){
allfiles <- mexloc[i,]
dupes <- duplicated(allfiles)
}
head(dupes)
head(allfiles)
allfiles <- mexloc[,i]
for (i in 1:300){
allfiles <- mexloc[i,c(4:9)]
dupes <- duplicated(allfiles)
}
head(allfiles)
head(dupes)
for (i in 1:300){
allfiles <- mexloc[i,]
dupes <- duplicated(allfiles)
}
head(allfiles)
head(dupes)
for (i in 1:300){
allfiles <- mexloc[i,]
print(dupes <- duplicated(allfiles))
}
if dupes <- duplicated(allfiles) ==TRUE
if duplicated(allfiles) ==TRUE
ifelse(duplicated(allfiles)==TRUE, print(hello))
help(ifelse)
for (i in 1:300){
allfiles <- mexloc[i,]
ifelse(duplicated(allfiles)==TRUE, print(hello), no)
}
for (i in 1:300){
allfiles <- mexloc[i,]
return <- ifelse(duplicated(allfiles)==TRUE, print(hello), print(no)
}
head(return)
for (i in 1:300){
allfiles <- mexloc[i,]
dupes <- duplicated(allfiles)
return <- ifelse(subset(dupes, select = 1)==TRUE, print(hello), print(no))
}
head(return)
#head(allfiles)
#head(dupes)
head(return)
for (i in 1:300){
allfiles <- mexloc[i,]
dupes <- duplicated(allfiles)
return <- ifelse(subset(dupes, select = [,1])==TRUE, print(hello), print(no))
}
head(return)
return
head(dupes)
allfiles <- mexloc(i)
mexlocfull <- read.table("PBI_Mexico_data.txt", header = TRUE, sep = "\t" ,fill = TRUE, stringsAsFactors = FALSE)
mexloc <- mexlocfull[,c(4:9)]
allfiles <- mexloc(i)
mexlocfull <- read.table("PBI_Mexico_data.txt", header = TRUE, sep = "\t" ,fill = TRUE, stringsAsFactors = FALSE)
mexloc <- mexlocfull[,c(4:9)]
allfiles <- mexloc[i,]
head(allfiles)
for (i in 1:300){
mexlocfull <- read.table("PBI_Mexico_data.txt", header = TRUE, sep = "\t" ,fill = TRUE, stringsAsFactors = FALSE)
mexloc <- mexlocfull[,c(4:9)]
allfiles <- mexloc[i,]
dupes <- duplicated(allfiles)
}
for (i in 1:300){
mexlocfull <- read.table("PBI_Mexico_data.txt", header = TRUE, sep = "\t" ,fill = TRUE, stringsAsFactors = FALSE)
mexloc <- mexlocfull[,c(4:9)]
allfiles <- mexloc[i,]
dupes <- duplicated(allfiles)
}
mexlocfull <- read.table("PBI_Mexico_data.txt", header = TRUE, sep = "\t" ,fill = TRUE, stringsAsFactors = FALSE)
mexloc <- mexlocfull[,c(4:9)]
head(mexloc)
unqloc <- unique(mexloc, nmax=1)
head(unqloc)
allfiles <- mexloc[i,]
head(allfiles)
dupes <- duplicated(allfiles)
head(dupes)
for (i in 1:300){
allfiles <- mexloc[i,]
dupes <- duplicated(allfiles)
}
head(allfiles)
head(dupes)
for (i in 1:300){
allfiles <- mexloc[i,]
dupes <- duplicated(allfiles, header = TRUE)
}
head(dupes)
mexloc[duplicated(mexloc),]
dupes2 <- mexloc[duplicated(mexloc),]
head(dupes2)
for (i in 1:300){
allfiles <- mexloc[i,]
dupes <- mexloc[duplicated(allfiles),]
}
head(dupes)
unqloc <- unique(mexloc[duplicated(mexloc),])
head(unqloc)
for (i in 1:300){
allfiles <- mexloc[i,]
dupes <- unique(mexloc[duplicated(mexloc[i,]),])
}
head(dupes)
ead(allfiles)
head(allfiles)
#head(mexloc)
head(unqloc)
dupe <- duplicated(mexloc)
head(dupe)
head(mexlocsub)
possible <- rbind(unqloc,mexloc)
head(possible)
help(rbind)
unqloc <- unique(mexloc, nmax=1)
mexloc <- mexlocfull[,c(4:9)]
#head(mexloc)
##how to subset mexloc Localities
#mexlocsub <- subset(mexloc, select = Locality)
#summary(mexlocsub)
#head(mexlocsub)
## is the row a duplicate? reads the duplicate as
##TRUE after the original has been read
dupe <- duplicated(mexloc)
#head(dupe)
##list of unique duplicated localities
unqloc <- unique(mexloc, nmax=1)
#unqloc <- unique(mexloc[duplicated(mexloc),])
#summary(unqloc)
#head(unqloc)
##how to subset unique Localities
#unqlocsub <- subset(unqloc, select = Locality)
#head(unqlocsub)
#all.equal(mexlocsub, unqloc)
possible <- rbind(unqloc,mexloc)
head(possible)
mexlocfull <- read.table("PBI_Mexico_data.txt", header = TRUE, sep = "\t" ,fill = TRUE, stringsAsFactors = FALSE)
mexloc <- mexlocfull[,c(4:9)]
unqloc <- unique(mexloc, nmax=1)
possible <- rbind(unqloc,mexloc)
head(possible)
possible <- rbind(mexloc,unqloc)
head(possible)
possible <- rbind(mexloc,unqloc)
possloc <- unique(possible[duplicated(possible),])
#head(possible)
head(possloc)
possible <- rbind(mexloc,unqloc, order(Locality))
help(order)
dupes <- unique(mexloc[duplicated(mexloc[i,]),])
head(dupes)
head(allfiles)
unqloc <- unique(mexloc, nmax=1)
head(unqloc)
head(unqloc)
for (i in 1:300){
allfiles <- mexloc[i,]
dupes <- unique(mexloc[duplicated(mexloc[i,]),])
}
allfiles <- mexloc[i,]
for (i in 1:300){
allfiles <- mexloc[i,]
dupes <- unique(mexloc[duplicated(mexloc[i,]),])
}
head(allfiles)
head(dupes)
mexloc[duplicated(mexloc[i,]
mexloc[duplicated(mexloc[i,
for (i in 1:300){
allfiles <- mexloc[i,]
dupes <- unique(mexloc[i,], nmax=1)
}
head(dupes)
for (i in 1:300){
listfiles <- mexloc[i,]
dupelist <- unique(mexloc[i,], nmax=1)
}
head(dupelist)
for (i in 1:300){
listfiles <- mexloc[i,]
dupelist <- unique(mexloc[i,], nmax=1)
return <-  ifelse(listfiles==dupelsit, print(i))
}
#head(listfiles) this is only printing the last value(300)
#head(dupelist) also only printing the last value(300)
return
print(i)
return <-  ifelse(listfiles==dupelsit, print(i))
return <-  ifelse(listfiles==dupelist, print(i))
for (i in 1:300){
listfiles <- mexloc[i,]
dupelist <- unique(mexloc[i,], nmax=1)
head(dupelist) also only printing the last value(300)
return
mexlocfull <- read.table("PBI_Mexico_data.txt", header = TRUE, sep = "\t" ,fill = TRUE, stringsAsFactors = FALSE)
##data frame of relevant Mexico locality data:
mexloc <- mexlocfull[,c(4:9)]
#head(mexloc)
## how to subset mexloc Localities - not sure if I will use this for anything yet:
#mexlocsub <- subset(mexloc, select = Locality)
#summary(mexlocsub)
#head(mexlocsub)
## prints TRUE or FALSE for each row.
## TRUE - duplicate locality
## FALSE - there is no duplicate or the first of a set of duplicate localities is read.
dupe <- duplicated(mexloc)
#head(dupe)
## list of unique duplicated localities
unqloc <- unique(mexloc, nmax=1)
#unqloc <- unique(mexloc[duplicated(mexloc),]) also works
#summary(unqloc)
#head(unqloc)
for (i in 1:300){
for (j in 1:300){
return <-  ifelse(unqloc[i,]==mexloc[j,], print(j))
}
}
#head(listfiles) this is only printing the last value(300)
#head(dupelist) also only printing the last value(300)
return
for (i in 1:300){
listfiles <- mexloc[i,]
dupelist <- unique(mexloc[i,], nmax=1)
return <-  ifelse(listfiles==dupelist, print(i), print(no)) ##my idea was to see if I am able to find the duplicates then print a UID # to locate them
}
#head(listfiles) this is only printing the last value(300)
#head(dupelist) also only printing the last value(300)
return
for (i in 1:300){
for (j in 1:300){
return <-  ifelse(unqloc[i,]==mexloc[j,], print(j), print(no))
}
}
#head(listfiles) this is only printing the last value(300)
#head(dupelist) also only printing the last value(300)
return
head(listfiles)
for (i in 1:300){
for (j in 1:300){
return <-  ifelse(unqloc[i,]==mexloc[j,], print(j), print("no"))
}
}
for (i in 1:10){
for (j in 1:10){
return <-  ifelse(unqloc[i,]==mexloc[j,], print(j), print("no"))
}
}
#head(listfiles) this is only printing the last value(300)
#head(dupelist) also only printing the last value(300)
return
mexlocfull <- read.table("PBI_Mexico_data.txt", header = TRUE, sep = "\t" ,fill = TRUE, stringsAsFactors = FALSE)
##data frame of relevant Mexico locality data:
mexloc <- mexlocfull[,c(4:9)]
#head(mexloc)
## how to subset mexloc Localities - not sure if I will use this for anything yet:
#mexlocsub <- subset(mexloc, select = Locality)
#summary(mexlocsub)
#head(mexlocsub)
## prints TRUE or FALSE for each row.
## TRUE - duplicate locality
## FALSE - there is no duplicate or the first of a set of duplicate localities is read.
dupe <- duplicated(mexloc)
#head(dupe)
## list of unique duplicated localities
unqloc <- unique(mexloc, nmax=1)
#unqloc <- unique(mexloc[duplicated(mexloc),]) also works
#summary(unqloc)
#head(unqloc)
for (i in 1:10){
for (j in 1:10){
return <-  ifelse(unqloc[i,]==mexloc[j,], print(j), print("no"))
}
}
#head(listfiles) this is only printing the last value(300)
#head(dupelist) also only printing the last value(300)
return
head(mexloc)
for (i in 1:10){
for (j in 1:10){
return <-  ifelse(unqloc[i,]==mexloc[j,], print(Locality), print("no"))
}
}
#head(listfiles) this is only printing the last value(300)
#head(dupelist) also only printing the last value(300)
return
for (i in 1:10){
for (j in 1:10){
return <-  ifelse(unqloc[i,]==mexloc[j,], print("yes"), print("no"))
}
}
#head(listfiles) this is only printing the last value(300)
#head(dupelist) also only printing the last value(300)
return
for (i in 1:10){
for (j in 1:10){
return <-  ifelse(unqloc[,i]==mexloc[,j], print("yes"), print("no"))
}
}
#head(listfiles) this is only printing the last value(300)
#head(dupelist) also only printing the last value(300)
return
for (i in 1:10){
for (j in 1:10){
return <-  ifelse(unqloc[,i]==mexloc[,j], print(i), print("no"))
}
}
#head(listfiles) this is only printing the last value(300)
#head(dupelist) also only printing the last value(300)
return
for (i in 1:10){
for (j in 1:10){
return <-  ifelse(unqloc[i,]==mexloc[j,], print(i), print("no"))
}
}
#head(listfiles) this is only printing the last value(300)
#head(dupelist) also only printing the last value(300)
return
=======
require("gridExtra")
grid.arrange(arrangeGrob(p1, p2))
p2 <- ggplot(counts, aes(y = P, x = reorder(Insect,P)) +
geom_bar(stat = "identity")
grid.arrange(arrangeGrob(p1, p2))
require("ggplot2")
counts <- data.frame(Insect = pofygivenx$insect,P = pofygivenx$pofygivenx)
p1 <- ggplot(counts, aes(x = reorder(P, Insect), y = Insect)) +
geom_bar(stat = "identity")
p2 <- ggplot(counts, aes(y = P, x = reorder(Insect,P)) +
geom_bar(stat = "identity")
require("gridExtra")
grid.arrange(arrangeGrob(p1, p2))
p1 <- ggplot(counts, aes(x = Insect, y = P)) +
geom_bar(stat = "identity")
p2 <- ggplot(counts, aes(y = P, x = reorder(Insect,P)) +
geom_bar(stat = "identity")
require("gridExtra")
grid.arrange(arrangeGrob(p1, p2))
require("ggplot2")
counts <- data.frame(Insect = pofygivenx$insect,P = pofygivenx$pofygivenx)
p1 <- ggplot(counts, aes(x = Insect, y = P)) +
geom_bar(stat = "density")
p2 <- ggplot(counts, aes(y = P, x = reorder(Insect,P)) +
geom_bar(stat = "density")
require("gridExtra")
grid.arrange(arrangeGrob(p1, p2))
require("ggplot2")
counts <- data.frame(Insect = pofygivenx$insect,P = pofygivenx$pofygivenx)
p1 <- ggplot(counts, aes(x = Insect, y = P)) +
geom_bar(stat = "identity")
p2 <- ggplot(counts, aes(y = P, x = reorder(Insect,P)) +
geom_bar(stat = "identity")
coord_flip()
require("gridExtra")
grid.arrange(arrangeGrob(p1, p2))
require("ggplot2")
counts <- data.frame(Insect = pofygivenx$insect,P = pofygivenx$pofygivenx)
p1 <- ggplot(counts, aes(x = Insect, y = P)) +
geom_bar(stat = "identity") +
coord_flip()
p2 <- ggplot(counts, aes(y = P, x = reorder(Insect,P)) +
geom_bar(stat = "identity") +
coord_flip()
require("gridExtra")
grid.arrange(arrangeGrob(p1, p2))
require("ggplot2")
counts <- data.frame(Insect = pofygivenx$insect,P = pofygivenx$pofygivenx)
p1 <- ggplot(counts, aes(y = P,x = Insect)) +
geom_bar(stat = "identity") +
coord_flip()
p2 <- ggplot(counts, aes(y = P, x = reorder(Insect,P)) +
geom_bar(stat = "identity") +
coord_flip()
require("gridExtra")
grid.arrange(arrangeGrob(p1, p2))
p1 <- ggplot(counts, aes(y = P),x = Insect) +
geom_bar(stat = "identity") +
coord_flip()
grid.arrange(arrangeGrob(p1, p2))
counts <- data.frame(Insect = pofygivenx$insect,P = pofygivenx$pofygivenx)
p1 <- ggplot(counts, aes(y = P),x = Insect) +
geom_bar(stat = "identity") +
coord_flip()
p2 <- ggplot(counts, aes(y = P, x = reorder(Insect,P)) +
geom_bar(stat = "identity") +
coord_flip()
grid.arrange(arrangeGrob(p1, p2))
counts <- data.frame(Insect = pofygivenx$insect,P = pofygivenx$pofygivenx)
p1 <- ggplot(counts, aes(y = P,x = Insect)) +
geom_bar(stat = "identity") +
coord_flip()
p2 <- ggplot(counts, aes(y = P, x = reorder(Insect,P)) +
geom_bar(stat = "identity") +
coord_flip()
require("gridExtra")
grid.arrange(arrangeGrob(p1, p2))
counts <- data.frame(Insect = pofygivenx$insect,P = order(pofygivenx$pofygivenx))
counts <- data.frame(Insect = pofygivenx$insect,P = order(pofygivenx$pofygivenx))
#levels=mtcars2[order(mtcars$mpg)
p1 <- ggplot(counts, aes(y = P,x = Insect)) +
geom_bar(stat = "identity") +
coord_flip()
p2 <- ggplot(counts, aes(y = P, x = reorder(Insect,P)) +
geom_bar(stat = "identity") +
coord_flip()
require("gridExtra")
grid.arrange(arrangeGrob(p1, p2))
counts <- data.frame(Insect = pofygivenx$insect,P = order(pofygivenx$pofygivenx))
#levels=mtcars2[order(mtcars$mpg)
p1 <- ggplot(counts, aes(y = P,x = Insect)) +
geom_bar(stat = "identity") +
coord_flip()
grid.arrange(arrangeGrob(p1))
p1 <- ggplot(counts, aes(x = Insect,y = P)) +
geom_bar(stat = "identity") +
coord_flip()
grid.arrange(arrangeGrob(p1))
counts2 <- order(counts)
counts2
counts
counts <- data.frame(P = order(pofygivenx$pofygivenx),Insect = pofygivenx$insect)
counts
counts <- data.frame(P = order(pofygivenx$pofygivenx),Insect = pofygivenx$insect)
p1 <- ggplot(counts, aes(x = Insect,y = P)) +
geom_bar(stat = "identity") +
coord_flip()
grid.arrange(arrangeGrob(p1))
vectPofygivenx = pofygivenx$pofygivenx
insect = pofygivenx$insect
hist(vectPofygivenx)
p1 <- ggplot(counts, aes(x = Insect,y = P)) +
geom_bar(stat = "identity") +
coord_flip()
grid.arrange(arrangeGrob(p1))
counts <- data.frame(P = order(pofygivenx$pofygivenx),Insect = pofygivenx$insect)
#levels=mtcars2[order(mtcars$mpg)
p1 <- ggplot(counts, order_by(P, ~ mpg, dat2), aes(x = Insect,y = P)) +
geom_bar(stat = "identity") +
coord_flip()
grid.arrange(arrangeGrob(p1))
pofygivenx
pofygivenx$pofygivenx
p1 <- ggplot(counts, aes(x = Insect, y = P)) +
c
install.packages("devtools")
library(devtools)
install_github("plotflow", "trinker")
counts <- data.frame(P = order(pofygivenx$pofygivenx),Insect = pofygivenx$insect)
#levels=mtcars2[order(mtcars$mpg)
p1 <- ggplot(counts, order_by(P, ~ mpg, dat2), aes(x = Insect,y = P)) +
geom_bar(stat = "identity") +
coord_flip()
grid.arrange(arrangeGrob(p1))
library(plotflow)
order_by
install_github("trinker/plotflow", "trinker")
counts <- data.frame(P = order(pofygivenx$pofygivenx),Insect = pofygivenx$insect)
#levels=mtcars2[order(mtcars$mpg)
p1 <- ggplot(counts, order_by(P, ~ mpg, dat2), aes(x = Insect,y = P)) +
geom_bar(stat = "identity") +
coord_flip()
grid.arrange(arrangeGrob(p1))
counts <- data.frame(P = order(pofygivenx$pofygivenx),Insect = pofygivenx$insect)
head(counts)
pofygivenx$pofygivenx
counts <- data.frame(order(pofygivenx$pofygivenx),Insect = pofygivenx$insect)
head(counts)
pofygivenx$pofygivenx
counts <- data.frame(P= pofygivenx$pofygivenx,Insect = pofygivenx$insect)
head(counts)
counts<- counts[order(P),]
counts<- counts[order(counts$P),]
head(counts)
p1 <- ggplot(counts, order_by(P, ~ mpg, dat2), aes(x = Insect,y = P)) +
geom_bar(stat = "identity") +
coord_flip()
grid.arrange(arrangeGrob(p1))
p1 <- ggplot(counts, aes(x = Insect,y = P)) +
geom_bar(stat = "identity") +
coord_flip()
grid.arrange(arrangeGrob(p1))
counts<- counts[order(counts$P)]
counts<- counts[order(P),]
attach(counts)
counts<- counts[order(P),]
head(counts)
counts<- counts[order(-P),]
head(counts)
p1 <- ggplot(counts, aes(x = Insect,y = P)) +
geom_bar(stat = "identity") +
coord_flip()
grid.arrange(arrangeGrob(p1))
counts2<- counts[order(-P),]
p1 <- ggplot(counts2, aes(x = Insect,y = P)) +
geom_bar(stat = "identity") +
coord_flip()
grid.arrange(arrangeGrob(p1))
head(counts)
counts2
counts <- data.frame(P= pofygivenx$pofygivenx*100,Insect = pofygivenx$insect)
attach(counts)
counts2<- counts[order(-P),]
head(counts)
p1 <- ggplot(counts2, aes(x = Insect,y = P)) +
geom_bar(stat = "identity") +
coord_flip()
grid.arrange(arrangeGrob(p1))
detach(counts)
counts$P <- factor(counts$P, levels = counts$P, ordered = TRUE)
p1 <- ggplot(counts2, aes(x = Insect,y = P)) +
geom_bar(stat = "identity") +
coord_flip()
grid.arrange(arrangeGrob(p1))
counts <- data.table(P= pofygivenx$pofygivenx,Insect = pofygivenx$insect)
counts <- data.frame(P= pofygivenx$pofygivenx,Insect = pofygivenx$insect)
counts
head(counts)
head(counts$P)
counts$P <- factor(counts$P levels = counts$P, ordered = TRUE)
counts$P <- factor(counts$P, levels = counts$P, ordered = TRUE)
p1 <- ggplot(counts2, aes(x = Insect,y = P)) +
geom_bar(stat = "identity") +
coord_flip()
grid.arrange(arrangeGrob(p1))
counts$P <- as.factor(counts$P, levels = counts$P, ordered = TRUE)
counts$P <- factor(counts$P)
counts <- data.frame(P= as.factor(pofygivenx$pofygivenx),Insect = pofygivenx$insect)
p1 <- ggplot(counts2, aes(x = Insect,y = P)) +
geom_bar(stat = "identity") +
coord_flip()
grid.arrange(arrangeGrob(p1))
counts$P <-factor(counts$P, levels=counts[order(counts$P)
counts$P <-factor(counts$P, levels=counts[order(counts$P)])
counts$P <-factor(counts$P, levels=counts[order(counts$P)])
counts$P <-factor(counts$P, levels=order(counts$P))
p1 <- ggplot(counts2, aes(x = Insect,y = P)) +
geom_bar(stat = "identity") +
coord_flip()
grid.arrange(arrangeGrob(p1))
counts$P <-factor(counts$P, levels=counts$P[order(counts$P)])
p1 <- ggplot(counts2, aes(x = Insect,y = P)) +
geom_bar(stat = "identity") +
coord_flip()
grid.arrange(arrangeGrob(p1))
head(counts)
counts <- data.frame(P= as.factor(pofygivenx$pofygivenx),Insect = pofygivenx$insect)
counts$P <-factor(counts$P, levels=counts$P[order(counts$P)])
head(counts)
p1 <- ggplot(counts2, aes(x = Insect,y = P)) +
geom_bar(stat = "identity") +
coord_flip()
grid.arrange(arrangeGrob(p1))
head(data)
redlisted = subset(data,data$redlist == '1')
notredlisted = subset(data,data$redlist == '0')
x = list(unique(redlisted$insect))
# create value labels
redlist.f = ''
redlist.f <- factor(data$insect, levels= c(1:126),
labels = x)
# plot densities
sm.density.compare(data$pofygivenx, data$insect, xlab="P(x|y)", ylab="Insects",ylim=c(0, 10),xlim=c(0,1))
title(main="RedList Plants")
dev.off()
require(sm)
data.family <- dbGetQuery(connection, "select count(SpecimenUID) as count,T5.TaxName as family  FROM Specimen S1 left join MNL T1 ON S1.Genus=T1.MNLUID left join MNL T2 ON S1.Species=T2.MNLUID left join MNL T3 ON S1.Tribe=T3.MNLUID left join MNL T4 on S1.Subfamily=T4.MNLUID left join MNL T5 on T4.ParentID=T5.MNLUID left join Locality L1 on S1.Locality=L1.LocalityUID left join Flora_MNL F1 ON S1.HostG=F1.HostMNLUID left join Flora_MNL F2 ON S1.HostSp=F2.HostMNLUID left join Flora_MNL F3 ON S1.HostSSp=F3.HostMNLUID left join Flora_MNL F4 ON S1.HostF=F4.HostMNLUID left join SubDiv SD on L1.SubDivUID=SD.SubDivUID left join StateProv SP on SD.StateProvUID=SP.StateProvUID left join colevent CE on S1.ColEventUID=CE.ColEventUID left join Collector C1 on CE.Collector=C1.CollectorUID left join Country CN on SP.CountryUID=CN.UID left join HostCommonName HC on S1.HostCName=HC.CommonUID  WHERE S1.Insect_ID=1 group by T5.TaxName")
rm(list=ls())
#requirements
require(RMySQL)
require(igraph)
require(ggplot)
require(gplots)
require(vcd)
connection <- dbConnect(MySQL(), user="root", password="543#$rdS", dbname="pbi_locality", host="localhost")
dbListTables(connection)
dbListFields(connection, "host_network_genus_miridae")
data.family <- dbGetQuery(connection, "select count(SpecimenUID) as count,T5.TaxName as family  FROM Specimen S1 left join MNL T1 ON S1.Genus=T1.MNLUID left join MNL T2 ON S1.Species=T2.MNLUID left join MNL T3 ON S1.Tribe=T3.MNLUID left join MNL T4 on S1.Subfamily=T4.MNLUID left join MNL T5 on T4.ParentID=T5.MNLUID left join Locality L1 on S1.Locality=L1.LocalityUID left join Flora_MNL F1 ON S1.HostG=F1.HostMNLUID left join Flora_MNL F2 ON S1.HostSp=F2.HostMNLUID left join Flora_MNL F3 ON S1.HostSSp=F3.HostMNLUID left join Flora_MNL F4 ON S1.HostF=F4.HostMNLUID left join SubDiv SD on L1.SubDivUID=SD.SubDivUID left join StateProv SP on SD.StateProvUID=SP.StateProvUID left join colevent CE on S1.ColEventUID=CE.ColEventUID left join Collector C1 on CE.Collector=C1.CollectorUID left join Country CN on SP.CountryUID=CN.UID left join HostCommonName HC on S1.HostCName=HC.CommonUID  WHERE S1.Insect_ID=1 group by T5.TaxName")
slices <- c(data.family$count)
greaters <- subset(data$count, slices > 100000)
greaters <- subset(data.family$count, slices > 100000)
lbls <- paste(subset(data$InstName, slices > 10000),'\n',subset(slices, slices > 10000))
lbls <- paste(subset(data.family$family, slices > 100000),'\n',subset(slices, slices > 100000))
pie(greaters, labels = lbls, col = rainbow(24), main="")
greaters <- subset(data.family$count, slices > 10000)
lbls <- paste(subset(data.family$family, slices > 10000),'\n',subset(slices, slices > 10000))
pie(greaters, labels = lbls, col = rainbow(24), main="")
pie(greaters, labels = lbls, main="")
pie(greaters, labels = lbls, clockwise = TRUE)
pie(greaters, labels = lbls, clockwise = FALSE)
pie(greaters, labels = lbls, clockwise = TRUE, init.angle = 180)
pie(greaters, labels = lbls, clockwise = TRUE, init.angle = 90)
pie(greaters, labels = lbls, clockwise = TRUE, init.angle = 0)
pie(greaters, labels = lbls, clockwise = TRUE, init.angle = 360)
pie(greaters, labels = lbls, clockwise = TRUE, init.angle = 360)
pie(greaters, labels = lbls, clockwise = TRUE, init.angle = 15)
pie(greaters, labels = lbls, clockwise = TRUE, init.angle = 330)
pie(greaters, labels = lbls, clockwise = TRUE, init.angle = 360)
pie(greaters, labels = lbls, clockwise = TRUE, init.angle = 60)
pie(greaters, labels = lbls, clockwise = TRUE, init.angle = 90)
pie(greaters, labels = lbls, clockwise = TRUE, init.angle = 1800)
pie(greaters, labels = lbls, clockwise = TRUE, init.angle = 180)
pie(greaters, labels = lbls, clockwise = TRUE, init.angle = 200)
pie(greaters, labels = lbls, clockwise = TRUE, init.angle = 300)
pie(greaters, labels = lbls, clockwise = TRUE, init.angle = 250)
pie(greaters, labels = lbls, clockwise = TRUE, init.angle = 240)
pie(greaters, labels = lbls, clockwise = TRUE, init.angle = 220)
pie(greaters, labels = lbls, clockwise = TRUE, init.angle = 200)
pie(greaters, labels = lbls, clockwise = FALSE, init.angle = 200)
pie(greaters, labels = lbls, clockwise = TRUE, init.angle = 200)
pie(slices, labels = lbls, clockwise = TRUE, init.angle = 200)
pie(slices, clockwise = TRUE, init.angle = 200)
pie(slices)
pie(greaters, labels = lbls, clockwise = TRUE, init.angle = 200)
pie(greaters, labels = lbls, clockwise = TRUE, col=colours, init.angle = 200)
colours=c("#8dd3c7", "#ffffb3", "#bebada", "#80b1d3", "#fb8072", "#fdb462", "#b3de69", "#d9d9d9", "#fccde5")
pie(greaters, labels = lbls, clockwise = TRUE, col=colours, init.angle = 200)
slices
slices <- sort(c(data.family$count))
greaters <- subset(data.family$count, slices > 10000)
greaters <- subset(data.family$count, slices > 10000)
lbls <- paste(subset(data.family$family, slices > 10000),'\n',subset(slices, slices > 10000))
pie(greaters, labels = lbls, clockwise = TRUE, col=colours, init.angle = 200)
slices <- c(data.family$count)
greaters <- subset(data.family$count, slices > 10000)
greaters
greaters <- sort(greaters)
greaters
greaters <- order(greaters)
greaters
colours=c("#8dd3c7", "#ffffb3", "#bebada", "#80b1d3", "#fb8072", "#fdb462", "#b3de69", "#d9d9d9", "#fccde5")
slices <- c(data.family$count)
greaters <- subset(data.family$count, slices > 10000)
lbls <- paste(subset(data.family$family, slices > 10000),'\n',subset(slices, slices > 10000))
pie(greaters, labels = lbls, clockwise = TRUE, col=colours, init.angle = 200)
greaters <- subset(data.family$count, slices > 15000)
lbls <- paste(subset(data.family$family, slices > 15000),'\n',subset(slices, slices > 15000))
pie(greaters, labels = lbls, clockwise = TRUE, col=colours, init.angle = 200)
greaters <- subset(data.family$count, slices > 20000)
lbls <- paste(subset(data.family$family, slices > 20000),'\n',subset(slices, slices > 20000))
pie(greaters, labels = lbls, clockwise = TRUE, col=colours, init.angle = 200)
greaters
sort(greaters)
slices <- c(data.family$count)
slices
slices <- sort(slices)
greaters <- subset(data.family$count, slices > 20000)
all <- sort(greaters)
lbls <- paste(subset(data.family$family, slices > 20000),'\n',subset(slices, slices > 20000))
pie(greaters, labels = lbls, clockwise = TRUE, col=colours, init.angle = 200)
slices <- c(data.family$count)
greaters <- subset(data.family$count, slices > 20000)
all <- sort(greaters)
lbls <- paste(subset(data.family$family, slices > 20000),'\n',subset(slices, slices > 20000))
pie(greaters, labels = lbls, clockwise = TRUE, col=colours, init.angle = 200)
pie(all, labels = lbls, clockwise = TRUE, col=colours, init.angle = 200)
pie(greaters, labels = lbls, clockwise = TRUE, col=colours, init.angle = 200)
pie(all,clockwise = TRUE, col=colours, init.angle = 200)
greaters <- subset(data.family$count, slices > 100)
pie(greaters, labels = lbls, clockwise = TRUE, col=colours, init.angle = 200)
all <- sort(greaters)
pie(all,clockwise = TRUE, col=colours, init.angle = 200)
pie(all,clockwise = TRUE, col=colours, init.angle = 10)
pie(all,clockwise = TRUE, col=colours, init.angle = 90)
pie(all,clockwise = TRUE, col=colours, init.angle = 180)
pie(all,clockwise = TRUE, col=colours, init.angle = 220)
pie(all,clockwise = TRUE, col=colours, init.angle = 300)
pie(all,clockwise = TRUE, col=colours, init.angle = 310)
pie(all,clockwise = TRUE, col=colours, init.angle = 350)
pie(all,clockwise = TRUE, col=colours, init.angle = 310)
pie(all,clockwise = TRUE, col=colours, init.angle = 90)
pie(greaters, labels = lbls, clockwise = FALSE, col=colours, init.angle = 200)
pie(greaters, labels = lbls, clockwise = FALSE, col=colours
pie(all,clockwise = TRUE, col=colours, init.angle = 90)
E
pie(greaters, labels = lbls, clockwise = TRUE, col=colours, init.angle = 200)
pie(all,clockwise = TRUE, col=colours, init.angle = 90)
pie(all,col=colours, init.angle = 90)
pie(all,col=colours)
pie(all,col=colours, init.angle = 90)
pie(all,col=colours, init.angle = 200)
pie(all,col=colours, init.angle = 300)
pie(all,col=colours, init.angle = 10)
pie(all,col=colours, init.angle = 330)
pie(all,col=colours, init.angle = 100)
pie(all,col=colours, init.angle = 90)
pie(all,col=colours, init.angle = 120)
pie(all,col=colours, init.angle = 200)
greaters <- subset(data.family$count, slices > 20000)
lbls <- paste(subset(data.family$family, slices > 20000),'\n',subset(slices, slices > 20000))
pie(all,col=colours, init.angle = 200)
pie(greaters, labels = lbls, clockwise = TRUE, col=colours, init.angle = 200)
greaters <- subset(data.family$count, slices > 100)
pie(all,col=colours, init.angle = 200)
greaters <- subset(data.family$count, slices > 1)
pie(greaters, labels = lbls, clockwise = TRUE, col=colours, init.angle = 200)
all <- sort(greaters)
pie(all,col=colours, init.angle = 200)
pie(all,col=colours, init.angle = 200)
colours=c("#8dd3c7", "#ffffb3", "#bebada", "#80b1d3", "#fb8072", "#fdb462", "#b3de69", "#d9d9d9", "#fccde5", "#fcede5")
pie(all,col=colours, init.angle = 200)
colours=c("#8dd3c7", "#ffffb3", "#bebada", "#80b1d3", "#fb8072", "#fdb462", "#b3de69", "#d9d9d9", "#fccde5", "#fcede5", "#7cede5")
pie(all,col=colours, init.angle = 200)
colours=c("#8dd3c7", "#ffffb3", "#bebada", "#80b1d3", "#fb8072", "#fdb462", "#b3de69", "#d9d9d9", "#fccde5", "#fcede5", "#ccede5")
pie(all,col=colours, init.angle = 200)
colours=c("#8dd3c7", "#ffffb3", "#bebada", "#80b1d3", "#fb8072", "#fdb462", "#b3de69", "#d9d9d9", "#fccde5", "#fcede5", "#cbede5")
pie(all,col=colours, init.angle = 200)
colours=c("#8dd3c7", "#ffffb3", "#bebada", "#80b1d3", "#fb8072", "#fdb462", "#b3de69", "#d9d9d9", "#fccde5", "#fcede5", "#cbede5", "#fbffb3",)
colours=c("#8dd3c7", "#ffffb3", "#bebada", "#80b1d3", "#fb8072", "#fdb462", "#b3de69", "#d9d9d9", "#fccde5", "#fcede5", "#cbede5", "#fbffb3")
pie(all,col=colours, init.angle = 200)
tables <- dbListTables(connection)
Number of georeferenced records:
#connect satement for mysql
connection <- dbConnect(MySQL(),user="root",password="543#$rdS",dbname="pbi_locality",host="localhost")
library("RMySQL")
#connect satement for mysql
connection <- dbConnect(MySQL(),user="root",password="543#$rdS",dbname="pbi_locality",host="localhost")
tables <- dbListTables(connection)
tables
library("RMySQL")
library("DBI")
connection <- dbConnect(MySQL(),user="root",password="543#$rdS",dbname="pbi_locality",host="localhost")
#mysqlConnect-function.R
#connect satement for mysql
library("RMySQL")
library("DBI")
connection <- dbConnect(MySQL(),user="root",password="543#$rdS",dbname="pbi_locality",host="localhost")
total <- dbGetQuery(connection, "Select count(*) from Locality")
install.packages(c("rmarkdown", "RMySQL"))
install.packages(c("rmarkdown", "RMySQL"))
install.packages(c("rmarkdown", "RMySQL"))
install.packages(c("rmarkdown", "RMySQL"))
install.packages(c("rmarkdown", "RMySQL"))
install.packages(c("rmarkdown", "RMySQL"))
install.packages("RMySQL")
install.packages("rmarkdown")
devtools::install_github("rstudio/rmarkdown")
??dbfetch
install.packages("base64")
install.packages("RMySQL")
r version
r -version
version
packages
rMysql -v
sessionInfo()
library("RMySQL")
sessionInfo()
library("base")
library("RMySQL")
sessionInfo()
install.packages(c("abind", "boot", "car", "codetools", "colorspace", "data.table", "devtools", "digest", "evaluate", "FactoMineR", "formatR", "Formula", "geosphere", "ggplot2", "highr", "Hmisc", "httr", "jsonlite", "knitr", "lattice", "manipulate", "maptools", "markdown", "MASS", "Matrix", "mgcv", "mime", "plyr", "psych", "Rcmdr", "RColorBrewer", "Rcpp", "RCurl", "reshape2", "rgdal", "roxygen2", "rstudioapi", "sandwich", "sp", "stringr", "swirl", "zoo"))
r version
version
setwd("~/Desktop/Dropbox/RClassHeather/R_class")
complete <- function(directory, id = 1:332) {
files_list <- list.files(directory, full.names = TRUE)
for (i in id) {
dat <- read.csv(files_list[i])
nobs <- sum(complete.cases(dat))
}
data.frame(id, nobs)
}
complete("specdata", 30:25)
q
complete <- function(directory, id = 1:332) {
files_list <- list.files(directory, full.names = TRUE)
for (i in id) {
dat <- read.csv(files_list[i])
nobs <- sum(complete.cases(dat))
}
data.frame(id, nobs)
}
complete("specdata", 30:25)
q
q
q
quit
end
ls
ls
complete <- function(directory, id = 1:332) {
files_list <- list.files(directory, full.names = TRUE)
for (i in id) {
dat <- read.csv(files_list[i])
nobs <- sum(complete.cases(dat))
}
data.frame(id, nobs)
}
complete("data_to_use", 30:25)
dat
data.frame
nobs
data_to_use
files_list <- list.files(directory, full.names = TRUE)
files_list <- list.files(data_to_use, full.names = TRUE)
setwd("~/Desktop/Dropbox/RClassHeather/R_class")
wd()
wd
getwd
getwd()
complete <- function(directory, id = 1:3) {
files_list <- list.files(directory, full.names = TRUE)
for (i in id) {
dat <- read.csv(files_list[i])
nobs <- sum(complete.cases(dat))
}
data.frame(id, nobs)
}
complete("data_to_use", 30:25)
id = 1:3
id
files_list <- list.files(data_to_use, full.names = TRUE)
help(filelist)
help(list.files)
files_list <- list.files("data_to_use", full.names = TRUE)
file_list
files_list
for (i in id) {
dat <- read.csv(files_list[i])
nobs <- sum(complete.cases(dat))
}
data.frame(id, nobs)
install.packages("devtools")
library(devtools)
install_github("idigbio/ridigbio")
install.packages("devtools")
install.packages("ridigbio")
idig_search_records(rq=list(genus="acer"))
getOption("repos")
library(ridigbio)
idig_search_records(rq=list(genus="acer"))
>>>>>>> origin/master
